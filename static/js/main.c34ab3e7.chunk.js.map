{"version":3,"sources":["tableStyles.js","api.js","useInterval.js","Consumption.js","Generation.js","Blockchain.js","Meter.js","CreateData.js","App.js","theme.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","table","minWidth","container","maxHeight","StyledTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","StyledTableRow","root","action","hover","TableRow","apiURL","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Consumption","props","useState","consumptions","setConsumptions","classes","fetchDataCallback","useCallback","a","fetch","meterpoint","json","then","res","map","consumption","key","Key","consumptionAmount","Record","consumptionDate","parseInt","cost","console","log","Array","isArray","length","myConsumptions","sort","b","listItems","slice","reverse","component","scope","moment","format","align","toFixed","Fragment","Typography","variant","height","width","data","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","name","domain","type","tickFormatter","unixTime","angle","textAnchor","labelFormatter","formatter","stroke","fillOpacity","fill","TableContainer","className","Paper","Table","stickyHeader","aria-label","TableHead","TableBody","Generation","generations","setGenerations","generation","generationAmount","productionAmount","generationDate","productionDate","revenue","myGenerations","myStyles","Blockchain","Map","fetchData","resCon","forEach","set","resProd","size","myDocuments","mySortedDocuments","dateA","JSON","stringify","undefined","Meter","Box","m","display","getRandomFloat","min","max","randn_bm","u","v","Math","random","num","sqrt","cos","PI","App","anchorEl","setAnchorEl","setMeterpoint","setListItems","result","MPAN","value","interval","generationOptions","method","headers","response","consumptionOptions","CreateData","handleClose","AppBar","position","Toolbar","IconButton","edge","onClick","event","currentTarget","keepMounted","open","Boolean","onClose","MenuItem","Link","to","path","FormControl","NativeSelect","onChange","target","disabled","createMuiTheme","primary","main","secondary","error","red","A400","background","default","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"ydAGaA,EAAYC,YAAW,CAChCC,MAAO,CACLC,SAAU,KAEZC,UAAW,CACTC,UAAW,OAIJC,EAAkBC,aAAW,SAACC,GAAD,MAAY,CAClDC,KAAM,CACFC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,OAEhCC,KAAM,CACFC,SAAU,OANaV,CAQ3BW,KAESC,EAAiBZ,aAAW,SAACC,GAAD,MAAY,CACjDY,KAAM,CACJ,qBAAsB,CACpBV,gBAAiBF,EAAMG,QAAQU,OAAOC,WAHhBf,CAMxBgB,KC5BOC,EAAS,6DCEP,SAASC,EAAYC,EAAUC,GAC5C,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAIR,GAAc,OAAVH,EAAgB,CAClB,IAAIK,EAAKC,aAJX,WACEL,EAAcG,YAGaJ,GAC3B,OAAO,kBAAMO,cAAcF,OAE5B,CAACL,I,qBCHS,SAASQ,EAAYC,GAAO,IAAD,EACEC,mBAAS,IADX,mBAC/BC,EAD+B,KACjBC,EADiB,KAEhCC,EAAUxC,IAEVyC,EAAoBC,sBAAW,uCAAE,sBAAAC,EAAA,sEACjBC,MAAMpB,EAAO,WAAaY,EAAMS,WAAa,kBAD5B,cAG9BC,OACAC,MAAK,SAAAC,GACFT,EACIS,EAAIC,KACA,SAACC,GAAD,MAAkB,CACdC,IAAKD,EAAYE,IACjBC,kBAAmBH,EAAYI,OAAOD,kBACtCE,gBAAiBC,SAASN,EAAYI,OAAOC,iBAC7CE,KAjBF,IAiBQP,EAAYI,OAAOD,0BAXV,2CAAF,qDAkBnC,CAACjB,EAAMS,aAwCT,GAtCAf,qBAAU,WACN4B,QAAQC,IAAI,gCACZlB,MACD,CAACA,IAEJhB,GAAY,WACRiC,QAAQC,IAAI,kCACZlB,MA6BD,CAAC,OAEAmB,MAAMC,QAAQvB,IAAyC,IAAxBA,EAAawB,OAG5C,OADAJ,QAAQC,IAAI,qBACL,KAGXD,QAAQC,IAAI,yBAA2BrB,EAAawB,QAGpD,IAAMC,EAAiBzB,EAAa0B,MAAK,SAACrB,EAAEsB,GAAH,OAAStB,EAAEY,gBAAkBU,EAAEV,mBAGlEW,EAFoBH,EAAeI,QAAQC,UAEbnB,KAAI,SAACC,GAAD,OACxC,kBAAC/B,EAAD,CAAgBgC,IAAKD,EAAYC,KAC7B,kBAAC7C,EAAD,CAAiB+D,UAAU,KAAKC,MAAM,OACjCC,IAAOrB,EAAYK,iBAAiBiB,OAAO,mBAEhD,kBAAClE,EAAD,CAAiBmE,MAAM,SAClBvB,EAAYG,kBAAkBqB,QAAQ,IAE3C,kBAACpE,EAAD,CAAiBmE,MAAM,SAClBvB,EAAYO,KAAKiB,QAAQ,QAKlC,OACI,kBAAC,IAAMC,SAAP,KACA,kBAACC,EAAA,EAAD,CAAYC,QAAQ,WACpB,kBAAC,IAAD,CAAqBC,OAAQ,IAAKC,MAAM,OACpC,kBAAC,IAAD,CAAWC,KAAMjB,EAAiBkB,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,KAC9E,8BACI,oCAAgBrD,GAAG,YAAYsD,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACvD,0BAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,0BAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MAGxD,kBAAC,IAAD,CACIC,QAAQ,kBACRC,KAAK,OACLC,OAAU,CAAC,OAAQ,QACnBC,KAAK,SACLC,cAAe,SAACC,GAAD,OAAc3B,IAAO2B,GAAU1B,OAAO,mBACrD2B,OAAQ,GACRC,WAAW,QAEf,kBAAC,IAAD,MACA,kBAAC,IAAD,CACIC,eAAgB,SAACH,GAAD,OAAc3B,IAAO2B,GAAU1B,OAAO,mBACtD8B,UAAW,SAAC7C,GAAD,MAAU,OAAMA,EAAKiB,QAAQ,MAE5C,kBAAC,IAAD,CAAMsB,KAAK,WAAWH,QAAQ,OAAOU,OAAO,UAAUC,YAAa,EAAGC,KAAK,uBAInF,kBAACC,EAAA,EAAD,CAAgBC,UAAWnE,EAAQpC,UAAWiE,UAAWuC,KACrD,kBAACC,EAAA,EAAD,CAAOC,cAAY,EAACH,UAAWnE,EAAQtC,MAAO6G,aAAW,gBACrD,kBAACC,EAAA,EAAD,KACI,kBAACzF,EAAA,EAAD,KACI,kBAACjB,EAAD,aACA,kBAACA,EAAD,CAAiBmE,MAAM,SAAvB,8BACA,kBAACnE,EAAD,CAAiBmE,MAAM,SAAvB,iBAGR,kBAACwC,EAAA,EAAD,KACK/C,MC/HN,SAASgD,EAAW9E,GAAQ,IAAD,EACAC,mBAAS,IADT,mBAC/B8E,EAD+B,KAClBC,EADkB,KAEhC5E,EAAUxC,IAEVyC,EAAoBC,sBAAW,uCAAE,sBAAAC,EAAA,sEACjBC,MAAMpB,EAAO,WAAWY,EAAMS,WAAW,iBADxB,cAG9BC,OACAC,MAAK,SAAAC,GACFoE,EACIpE,EAAIC,KACA,SAACoE,GAAD,MAAiB,CACblE,IAAKkE,EAAWjE,IAChBkE,iBAAkBD,EAAW/D,OAAOiE,iBACpCC,eAAgBhE,SAAS6D,EAAW/D,OAAOmE,gBAC3CC,QAjBH,IAiBYL,EAAW/D,OAAOiE,yBAXZ,2CAAF,qDAkBnC,CAACnF,EAAMS,aAkCT,GAhCApB,GAAY,WACRiC,QAAQC,IAAI,iCACZlB,MACD,CAAC,MAGJX,qBAAU,WACN4B,QAAQC,IAAI,+BAEZlB,MAqBD,CAACA,KAEAmB,MAAMC,QAAQsD,IAAuC,IAAvBA,EAAYrD,OAG1C,OADAJ,QAAQC,IAAI,oBACL,KAGXD,QAAQC,IAAI,YAAcwD,EAAYrD,QAGtC,IAAM6D,EAAgBR,EAAYnD,MAAK,SAACrB,EAAEsB,GAAH,OAAStB,EAAE6E,eAAiBvD,EAAEuD,kBAG/DtD,EAFmByD,EAAcxD,QAAQC,UAEZnB,KAAI,SAACoE,GAAD,OACvC,kBAAClG,EAAD,CAAgBgC,IAAKkE,EAAWlE,KAC5B,kBAAC7C,EAAD,CAAiB+D,UAAU,KAAKC,MAAM,OACjCC,IAAO8C,EAAWG,gBAAgBhD,OAAO,sBAE9C,kBAAClE,EAAD,CAAiBmE,MAAM,SAClB4C,EAAWC,iBAAiB5C,QAAQ,IAEzC,kBAACpE,EAAD,CAAiBmE,MAAM,SAClB4C,EAAWK,QAAQhD,QAAQ,QAKpC,OACI,kBAAC,IAAMC,SAAP,KACA,kBAACC,EAAA,EAAD,CAAYC,QAAQ,WACpB,kBAAC,IAAD,CAAqBC,OAAQ,IAAKC,MAAM,OACpC,kBAAC,IAAD,CAAWC,KAAM2C,EAAgB1C,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,KAC7E,8BACI,oCAAgBrD,GAAG,YAAYsD,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACvD,0BAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,0BAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MAGxD,kBAAC,IAAD,CACIC,QAAQ,iBACRC,KAAK,OACLC,OAAU,CAAC,OAAQ,QACnBC,KAAK,SACLC,cAAe,SAACC,GAAD,OAAc3B,IAAO2B,GAAU1B,OAAO,mBACrD2B,OAAQ,GACRC,WAAW,QAEf,kBAAC,IAAD,MACA,kBAAC,IAAD,CACIC,eAAgB,SAACH,GAAD,OAAc3B,IAAO2B,GAAU1B,OAAO,mBACtD8B,UAAW,SAACoB,GAAD,MAAa,OAAMA,EAAQhD,QAAQ,MAElD,kBAAC,IAAD,CAAMsB,KAAK,WAAWH,QAAQ,UAAUU,OAAO,UAAUC,YAAa,EAAGC,KAAK,uBAItF,kBAACC,EAAA,EAAD,CAAgBC,UAAWnE,EAAQpC,UAAWiE,UAAWuC,KACrD,kBAACC,EAAA,EAAD,CAAOC,cAAY,EAACH,UAAWnE,EAAQtC,MAAO6G,aAAW,gBACrD,kBAACC,EAAA,EAAD,KACI,kBAACzF,EAAA,EAAD,KACI,kBAACjB,EAAD,aACA,kBAACA,EAAD,CAAiBmE,MAAM,SAAvB,+BACA,kBAACnE,EAAD,CAAiBmE,MAAM,SAAvB,oBAGR,kBAACwC,EAAA,EAAD,KACK/C,M,YC7Hf0D,EAAW3H,YAAW,CACxBC,MAAO,CACLC,SAAU,KAEZC,UAAW,CACTC,UAAW,OAIF,SAASwH,EAAWzF,GAC/B,IAAMI,EAAUoF,IADqB,EAEGvF,mBAAS,IAAIyF,KAFhB,mBAE9BxF,EAF8B,KAEhBC,EAFgB,OAGCF,mBAAS,IAAIyF,KAHd,mBAG9BX,EAH8B,KAGjBC,EAHiB,cAsBtBW,IAtBsB,2EAsBrC,sBAAApF,EAAA,sEACyBC,MAAMpB,EAAO,kBADtC,qBAISsB,OACAC,MAAM,SAAAiF,GACK,IAAIjE,EAAiB,IAAI+D,IACzBE,EAAOC,SAAS,SAACjF,GACTe,EAAemE,IAAKlF,EAAII,IAAKJ,EAAIM,WAGzCf,EAAiBwB,MAXrC,SAe0BnB,MAAMpB,EAAO,iBAfvC,cAiBSsB,OACAC,MAAM,SAAAoF,GACK,IAAIR,EAAgB,IAAIG,IACxBK,EAAQF,SAAS,SAACjF,GACV2E,EAAcO,IAAKlF,EAAII,IAAKJ,EAAIM,WAGxC8D,EAAgBO,MAxBpC,4CAtBqC,sBA2DrC,GARA7F,qBAAU,WACNiG,MACD,IAEHtG,GAAY,WACRsG,MACD,CAAC,MAEuB,IAAtBzF,EAAa8F,KAEd,OAAO,KAGX,IAAMC,EAAc,IAAIP,IAAJ,sBAAYxF,GAAZ,YAA4B6E,KAC1CmB,EAAoB,IAAIR,IAAI,YAAIO,GAAarE,MA5DnD,SAAwBrB,EAAEsB,GAEtB,IAAIsE,EAYJ,OATIA,EADC,oBAAqB5F,EAAE,GAChBa,SAASb,EAAE,GAAGY,iBAEdC,SAASb,EAAE,GAAG8E,iBAErB,oBAAqBxD,EAAE,GAChBT,SAASS,EAAE,GAAGV,iBAEdC,SAASS,EAAE,GAAGwD,iBAEXc,MAgDbrE,EAAY,YAAIoE,GAAmBrF,KAAI,mCAAEG,EAAF,KAAME,EAAN,YAC7C,kBAACnC,EAAD,CAAgBgC,IAAKC,GACjB,kBAAC9C,EAAD,CAAiB+D,UAAU,KAAKC,MAAM,OAClC,6BACEkE,KAAKC,UAAUnF,OAAOoF,EAAU,SAM1C,OACI,kBAAC,IAAM/D,SAAP,KACA,kBAAC+B,EAAA,EAAD,CAAgBC,UAAWnE,EAAQpC,UAAWiE,UAAWuC,KACrD,kBAACC,EAAA,EAAD,CAAOC,cAAY,EAACH,UAAWnE,EAAQtC,MAAO6G,aAAW,gBACrD,kBAACC,EAAA,EAAD,KACI,kBAACzF,EAAA,EAAD,KACI,kBAACjB,EAAD,+BAGR,kBAAC2G,EAAA,EAAD,KACE/C,M,OCxGH,SAASyE,EAAMvG,GAC1B,OACE,kBAACwG,EAAA,EAAD,CAAKC,EAAG,EAAGxE,UAAU,MAAMyE,QAAQ,SAC/B,kBAAClE,EAAA,EAAD,eACYxC,EAAMS,aCU5B,SAASkG,EAAeC,EAAKC,GACzB,OAXJ,SAASC,IAEL,IADA,IAAIC,EAAI,EAAGC,EAAI,EACH,IAAND,GAASA,EAAIE,KAAKC,SACxB,KAAY,IAANF,GAASA,EAAIC,KAAKC,SACxB,IAAIC,EAAMF,KAAKG,MAAO,EAAMH,KAAK1F,IAAKwF,IAAQE,KAAKI,IAAK,EAAMJ,KAAKK,GAAKN,GAExE,OADAG,EAAMA,EAAM,GAAO,IACT,GAAKA,EAAM,EAAUL,IACxBK,EAIAL,IAAcD,EAAMD,GAAOA,ECEvB,SAASW,EAAIvH,GAAQ,IAAD,EACFC,mBAAS,MADP,mBAC3BuH,EAD2B,KACjBC,EADiB,OAEExH,mBAAS,IAFX,mBAE3BQ,EAF2B,KAEfiH,EAFe,OAGAzH,mBAAS,IAHT,mBAG3B6B,EAH2B,KAGhB6F,EAHgB,KAKjCjI,qBAAU,WACV,4CACE,sBAAAa,EAAA,sEACoBC,MAAMpB,EAAO,YADjC,cAGKsB,OACAC,MAAK,SAAAC,GACF+G,EAAa/G,EAAIC,KAAI,SAAC+G,GAAD,OAClB,4BAAQ7G,IAAK6G,EAAO1G,OAAO2G,KAAMC,MAAOF,EAAO1G,OAAO2G,MAAOD,EAAO1G,OAAO2G,aANtF,4CADF,uBAAC,WAAD,wBAcElC,GAEA,IAAMoC,EAAWlI,aAAY,YDrBlB,SAAoBY,GAC/Ba,QAAQC,IAAI,qBAAqBd,GAEjC,IAAM0E,EAAmBwB,EAvBP,GACA,IAwBZqB,EAAoB,CACtBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BtJ,KAAMwH,KAAKC,UAAU,CAAEwB,KAAMpH,EACN0E,iBAAkBA,KAI7C3E,MAAMpB,EAAO,eAAgB4I,GACxBrH,MAAK,SAAAwH,GAAQ,OAAIA,EAASzH,UAE/B,IAAMO,EAAoB0F,EAjCP,GACA,IAkCbyB,EAAqB,CACvBH,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BtJ,KAAMwH,KAAKC,UAAU,CAAEwB,KAAMpH,EACNQ,kBAAmBA,KAI9CT,MAAMpB,EAAO,gBAAiBgJ,GACzBzH,MAAK,SAAAwH,GAAQ,OAAIA,EAASzH,UCJ7B2H,CAAW5H,KA1BI,KA4BjB,OAAO,kBAAMX,cAAciI,MAC1B,CAACtH,IAEJ,IAIM6H,EAAc,WAClBb,EAAa,OAQf,OACI,kBAAC,IAAMlF,SAAP,KACE,kBAAC,IAAD,KACE,kBAACgG,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAASjK,MAAM,UAAUiG,aAAW,QACnD,kBAAC,IAAD,CAAUiE,QAnBL,SAAAC,GACjBpB,EAAaoB,EAAMC,mBAoBT,kBAAC,IAAD,CACElJ,GAAG,YACH4H,SAAUA,EACVuB,aAAW,EACXC,KAAMC,QAAQzB,GACd0B,QAASZ,GAET,kBAACa,EAAA,EAAD,CAAUP,QAASN,EAAarG,UAAWmH,IAAMC,GAAG,KAApD,QACA,kBAACF,EAAA,EAAD,CAAUP,QAASN,EAAarG,UAAWmH,IAAMC,GAAG,gBAApD,eACA,kBAACF,EAAA,EAAD,CAAUP,QAASN,EAAarG,UAAWmH,IAAMC,GAAG,eAApD,cACA,kBAACF,EAAA,EAAD,CAAUP,QAASN,EAAarG,UAAWmH,IAAMC,GAAG,eAApD,eAEF,kBAAC7G,EAAA,EAAD,CAAYC,QAAQ,MAApB,mBAKJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6G,KAAK,gBACV,kBAAC/C,EAAD,CAAO9F,WAAYA,IACnB,kBAAC+F,EAAA,EAAD,CAAKC,EAAG,GACN,kBAACjE,EAAA,EAAD,6BAGA,kBAACzC,EAAD,CAAaU,WAAYA,MAG7B,kBAAC,IAAD,CAAO6I,KAAK,eACV,kBAAC/C,EAAD,CAAO9F,WAAYA,IACnB,kBAAC+F,EAAA,EAAD,CAAKC,EAAG,GACN,kBAACjE,EAAA,EAAD,4BAGA,kBAACsC,EAAD,CAAYrE,WAAYA,MAG5B,kBAAC,IAAD,CAAO6I,KAAK,eACV,kBAAC9C,EAAA,EAAD,CAAKC,EAAG,GACN,kBAACjE,EAAA,EAAD,oBAGA,kBAACiD,EAAD,QAGJ,kBAAC,IAAD,CAAO6D,KAAK,KACV,kBAAC9C,EAAA,EAAD,CAAKC,EAAG,GACN,kBAACjE,EAAA,EAAD,6BAGA,kBAACA,EAAA,EAAD,qDAIF,kBAACgE,EAAA,EAAD,CAAKC,EAAG,GACN,kBAACjE,EAAA,EAAD,gCAGA,kBAAC+G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACE1B,MAAOrH,EACPgJ,SAzEG,SAACZ,GACpBvH,QAAQC,IAAI,mBAAqBsH,EAAMa,OAAO5B,OAC9CJ,EAAemB,EAAMa,OAAO5B,SAyEZ,4BAAQ6B,UAAQ,EAAChF,aAAW,OAAOmD,MAAM,KACxChG,S,sBCjHN1D,EAjBDwL,YAAe,CAC3BrL,QAAS,CACPsL,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,MAEZC,WAAY,CACVC,QAAS,WCJKnB,QACW,cAA7BoB,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAexM,MAAOA,GAEpB,kBAACyM,EAAA,EAAD,MACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvK,MAAK,SAAAwK,GACJA,EAAaC,gBAEdC,OAAM,SAAArB,GACL1I,QAAQ0I,MAAMA,EAAMsB,c","file":"static/js/main.c34ab3e7.chunk.js","sourcesContent":["import { withStyles, makeStyles } from '@material-ui/core/styles';\nimport { TableCell, TableRow } from '@material-ui/core';\n\nexport const useStyles = makeStyles({\n    table: {\n      minWidth: 400,\n    },\n    container: {\n      maxHeight: 440,\n    },\n  });\n\nexport const StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nexport const StyledTableRow = withStyles((theme) => ({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n      },\n    },\n  }))(TableRow);","export const apiURL = \"https://8ygbsdlnnf.execute-api.us-east-1.amazonaws.com/dev\";","import { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import React, {useState, useEffect, useCallback} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, Tooltip } from 'recharts';\nimport { useStyles, StyledTableCell, StyledTableRow } from './tableStyles';\nimport { apiURL } from './api.js';\nimport useInterval from './useInterval.js';\nimport moment from 'moment'\nimport { Typography } from '@material-ui/core';\n\nconst consumptionTariff = 0.09\n\nexport default function Consumption(props){\n    const [consumptions, setConsumptions] = useState([]);\n    const classes = useStyles();\n\n    const fetchDataCallback = useCallback( async function fetchData() {\n        const res = await fetch(apiURL+\"/meters/\" + props.meterpoint + \"/consumptions/\");\n        res\n            .json()\n            .then(res => {\n                setConsumptions(\n                    res.map(\n                        (consumption) => ({ \n                            key: consumption.Key,\n                            consumptionAmount: consumption.Record.consumptionAmount,\n                            consumptionDate: parseInt(consumption.Record.consumptionDate),\n                            cost: consumption.Record.consumptionAmount * consumptionTariff\n                        }) \n                    )\n                );\n            }\n            )\n    }\n    , [props.meterpoint]);\n\n    useEffect(() => {\n        console.log(\"inside Consumption useEffect\");\n        fetchDataCallback();\n    }, [fetchDataCallback]);\n\n    useInterval(() => {\n        console.log(\"inside Consumption useInterval\");\n        fetchDataCallback();\n        /*\n        const rawConsumptions = [\n            { consumptionAmount: 75, consumptionDate: 1588580730000 },\n            { consumptionAmount: 50, consumptionDate: 1588596856000 },\n            { consumptionAmount: 100, consumptionDate: 1588686856000 },\n            { consumptionAmount: 80, consumptionDate: 1588700199000 },\n            { consumptionAmount: 95, consumptionDate: 1588711539000 },\n            { consumptionAmount: 25, consumptionDate: 1589580730000 },\n            { consumptionAmount: 50, consumptionDate: 1589596856000 },\n            { consumptionAmount: 75, consumptionDate: 1589686856000 },\n            { consumptionAmount: 65, consumptionDate: 1589700199000 },\n            { consumptionAmount: 45, consumptionDate: 1589711539000 },\n            { consumptionAmount: 10, consumptionDate: 1590580730000 },\n            { consumptionAmount: 15, consumptionDate: 1590596856000 },\n            { consumptionAmount: 20, consumptionDate: 1590686856000 },\n            { consumptionAmount: 25, consumptionDate: 1590700199000 },\n            { consumptionAmount: 30, consumptionDate: 1590711539000 }  \n        ];\n        const myConsumptions = rawConsumptions.map( \n            (consumption) => ({ \n                            key: consumption.consumptionDate,\n                            consumptionAmount: consumption.consumptionAmount,\n                            consumptionDate: consumption.consumptionDate,\n                            cost: consumption.consumptionAmount * consumptionTariff\n                })\n            );\n        setConsumptions( myConsumptions );\n        */\n    }, [10000]);\n\n    if(!Array.isArray(consumptions) || consumptions.length === 0)\n    { \n        console.log(\"Null consumptions\");\n        return null;\n    }\n\n    console.log(\"Consumptions length = \" + consumptions.length);\n\n    // Make sure the data is sorted by date\n    const myConsumptions = consumptions.sort((a,b) => a.consumptionDate - b.consumptionDate);\n    const myConsumptionsRev = myConsumptions.slice().reverse();\n\n    const listItems = myConsumptionsRev.map((consumption) =>\n    <StyledTableRow key={consumption.key}>\n        <StyledTableCell component=\"th\" scope=\"row\">\n            {moment(consumption.consumptionDate).format('DD/MM/YY HH:mm')}\n        </StyledTableCell>\n        <StyledTableCell align=\"right\">\n            {consumption.consumptionAmount.toFixed(2)}\n        </StyledTableCell>\n        <StyledTableCell align=\"right\">\n            {consumption.cost.toFixed(2)}\n        </StyledTableCell>\n    </StyledTableRow>\n    );\n\n    return (\n        <React.Fragment>\n        <Typography variant=\"caption\">\n        <ResponsiveContainer height={350} width=\"95%\">\n            <AreaChart data={myConsumptions}  margin={{ top: 20, right: 30, left: 10, bottom: 60 }}>\n                <defs>\n                    <linearGradient id=\"colorCons\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\n                    </linearGradient>\n                </defs>\n                <XAxis \n                    dataKey=\"consumptionDate\"\n                    name=\"Time\"\n                    domain = {['auto', 'auto']}\n                    type=\"number\"\n                    tickFormatter={(unixTime) => moment(unixTime).format('DD/MM/YY HH:mm')}\n                    angle={-45} \n                    textAnchor=\"end\"\n                />\n                <YAxis />\n                <Tooltip \n                    labelFormatter={(unixTime) => moment(unixTime).format('DD/MM/YY HH:mm')}\n                    formatter={(cost) => \"£\" + cost.toFixed(2)}\n                />\n                <Area type=\"monotone\" dataKey=\"cost\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorCons)\" />\n            </AreaChart>\n        </ResponsiveContainer>\n        </Typography>\n        <TableContainer className={classes.container} component={Paper}>\n            <Table stickyHeader className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>Date</StyledTableCell>\n                        <StyledTableCell align=\"right\">Electricity consumed (kWh)</StyledTableCell>\n                        <StyledTableCell align=\"right\">Cost (£)</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {listItems}\n                </TableBody>\n            </Table>\n        </TableContainer>\n        </React.Fragment>\n    );\n}\n\n","import React, {useState, useEffect, useCallback} from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\nimport { ResponsiveContainer, AreaChart, Area, XAxis, YAxis, Tooltip } from 'recharts';\nimport { useStyles, StyledTableCell, StyledTableRow } from './tableStyles';\nimport { apiURL } from './api.js';\nimport useInterval from './useInterval.js';\nimport moment from 'moment'\n\nconst generationTariff = 0.07\n\nexport default function Generation(props) {\n    const [generations, setGenerations] = useState([]);\n    const classes = useStyles();\n\n    const fetchDataCallback = useCallback( async function fetchData() {\n        const res = await fetch(apiURL+\"/meters/\"+props.meterpoint+\"/productions/\");\n        res\n            .json()\n            .then(res => {\n                setGenerations(\n                    res.map(\n                        (generation) => ({ \n                            key: generation.Key,\n                            generationAmount: generation.Record.productionAmount,\n                            generationDate: parseInt(generation.Record.productionDate),\n                            revenue: generation.Record.productionAmount * generationTariff\n                        }) \n                    )\n                );\n            }\n            )\n    }\n    , [props.meterpoint]);\n\n    useInterval(() => {\n        console.log(\"inside Generation useInterval\");\n        fetchDataCallback();\n    }, [10000] \n    );\n\n    useEffect(() => {\n        console.log(\"inside Generation useEffect\");\n       \n        fetchDataCallback();\n        /*\n        const rawGenerations = [\n            { generationAmount: 65, generationDate: 1588580730000 },\n            { generationAmount: 75, generationDate: 1588596856000 },\n            { generationAmount: 110, generationDate: 1588686856000 },\n            { generationAmount: 70, generationDate: 1588700199000 },\n            { generationAmount: 60, generationDate: 1588710199000 },\n            { generationAmount: 45, generationDate: 1588711539000 }\n        ];\n        \n        const myGenerations = rawGenerations.map( \n            (generation) => ({ \n                            key: generation.generationDate,\n                            generationAmount: generation.generationAmount,\n                            generationDate: generation.generationDate,\n                            revenue: generation.generationAmount * generationTariff\n                })\n            );\n        setGenerations( myGenerations );\n        */\n    }, [fetchDataCallback]);\n\n    if(!Array.isArray(generations) || generations.length === 0)\n    { \n        console.log(\"Null generations\");\n        return null;\n    }\n\n    console.log(\"length = \" + generations.length);\n\n    // Make sure the data is sorted by date\n    const myGenerations = generations.sort((a,b) => a.generationDate - b.generationDate);\n    const myGenerationsRev = myGenerations.slice().reverse();\n\n    const listItems = myGenerationsRev.map((generation) =>\n    <StyledTableRow key={generation.key}>\n        <StyledTableCell component=\"th\" scope=\"row\">\n            {moment(generation.generationDate).format('DD/MM/YY HH:mm:ss')}\n        </StyledTableCell>\n        <StyledTableCell align=\"right\">\n            {generation.generationAmount.toFixed(2)}\n        </StyledTableCell>\n        <StyledTableCell align=\"right\">\n            {generation.revenue.toFixed(2)}\n        </StyledTableCell>\n    </StyledTableRow>\n    );\n\n    return (\n        <React.Fragment>\n        <Typography variant=\"caption\">\n        <ResponsiveContainer height={350} width=\"95%\">\n            <AreaChart data={myGenerations}  margin={{ top: 20, right: 30, left: 10, bottom: 60 }}>\n                <defs>\n                    <linearGradient id=\"colorCons\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                    <stop offset=\"5%\" stopColor=\"#85ed7e\" stopOpacity={0.8}/>\n                    <stop offset=\"95%\" stopColor=\"#85ed7e\" stopOpacity={0}/>\n                    </linearGradient>\n                </defs>\n                <XAxis \n                    dataKey=\"generationDate\"\n                    name=\"Time\"\n                    domain = {['auto', 'auto']}\n                    type=\"number\"\n                    tickFormatter={(unixTime) => moment(unixTime).format('DD/MM/YY HH:mm')}\n                    angle={-45} \n                    textAnchor=\"end\"\n                />\n                <YAxis />\n                <Tooltip \n                    labelFormatter={(unixTime) => moment(unixTime).format('DD/MM/YY HH:mm')}\n                    formatter={(revenue) => \"£\" + revenue.toFixed(2)}\n                />\n                <Area type=\"monotone\" dataKey=\"revenue\" stroke=\"#85ed7e\" fillOpacity={1} fill=\"url(#colorCons)\" />\n            </AreaChart>\n        </ResponsiveContainer>\n        </Typography>\n        <TableContainer className={classes.container} component={Paper}>\n            <Table stickyHeader className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>Date</StyledTableCell>\n                        <StyledTableCell align=\"right\">Electricity generated (kWh)</StyledTableCell>\n                        <StyledTableCell align=\"right\">Revenue (£)</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {listItems}\n                </TableBody>\n            </Table>\n        </TableContainer>\n        </React.Fragment>\n    );\n}\n\n","import React, {useState, useEffect } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { StyledTableCell, StyledTableRow } from './tableStyles';\nimport { apiURL } from './api.js';\nimport useInterval from './useInterval.js';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst myStyles = makeStyles({\n    table: {\n      minWidth: 400,\n    },\n    container: {\n      maxHeight: 800,\n    },\n  });\n\nexport default function Blockchain(props){\n    const classes = myStyles();\n    const [consumptions, setConsumptions] = useState(new Map());\n    const [generations, setGenerations] = useState(new Map());\n\n    function compareRecords(a,b)\n    {\n        var dateA, dateB;\n        \n        if ( 'consumptionDate' in a[1])\n            dateA = parseInt(a[1].consumptionDate);\n        else\n            dateA = parseInt(a[1].productionDate);\n\n        if ( 'consumptionDate' in b[1])\n            dateB = parseInt(b[1].consumptionDate);\n        else\n            dateB = parseInt(b[1].productionDate); \n\n        return dateB - dateA;\n    }\n\n    async function fetchData() {\n        const resCon = await fetch(apiURL+\"/consumptions/\");\n\n        resCon\n            .json()\n            .then( resCon => {\n                        let myConsumptions = new Map();\n                        resCon.forEach( (res) => { \n                                myConsumptions.set( res.Key, res.Record );\n                                } \n                        ); \n                        setConsumptions( myConsumptions );\n                    }\n                 );\n        \n        const resProd = await fetch(apiURL+\"/productions/\");\n        resProd\n            .json()\n            .then( resProd => {\n                        let myGenerations = new Map();\n                        resProd.forEach( (res) => { \n                                myGenerations.set( res.Key, res.Record );\n                                }                      \n                        ); \n                        setGenerations( myGenerations );\n                }\n            );\n    }\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    useInterval(() => {\n        fetchData();\n    }, [10000]);\n\n    if ( consumptions.size === 0 )\n    {\n        return null;\n    }\n\n    const myDocuments = new Map([...consumptions,...generations]);\n    const mySortedDocuments = new Map([...myDocuments].sort(compareRecords))\n\n    const listItems = [...mySortedDocuments].map(([Key,Record]) =>\n    <StyledTableRow key={Key}>\n        <StyledTableCell component=\"th\" scope=\"row\">\n            <pre>\n            { JSON.stringify(Record,undefined,2) }\n            </pre>\n        </StyledTableCell>\n    </StyledTableRow>\n    );\n\n    return (\n        <React.Fragment>\n        <TableContainer className={classes.container} component={Paper}>\n            <Table stickyHeader className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>Blockchain documents</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                { listItems }\n                </TableBody>\n            </Table>\n        </TableContainer>\n        </React.Fragment>\n    );\n};","import React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Meter(props) {\n    return (\n      <Box m={4} component=\"div\" display=\"block\">\n          <Typography>\n              Meter: {props.meterpoint}\n          </Typography>\n      </Box>\n    );\n  }\n","import { apiURL } from './api.js';\n\nconst minGeneration = 0.1;\nconst maxGeneration = 0.7;\n\nconst minConsumption = 0.1;\nconst maxConsumption = 0.5;\n\nfunction randn_bm() {\n    let u = 0, v = 0;\n    while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\n    while(v === 0) v = Math.random();\n    let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\n    num = num / 10.0 + 0.5; // Translate to 0 -> 1\n    if (num > 1 || num < 0) return randn_bm(); // resample between 0 and 1\n    return num;\n}\n\nfunction getRandomFloat(min, max) {\n    return randn_bm() * (max - min) + min;\n  }\n\nexport default function CreateData(meterpoint) {\n    console.log('Creating data for '+meterpoint);\n\n    const productionAmount = getRandomFloat(minGeneration,maxGeneration);\n\n    const generationOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ MPAN: meterpoint,\n                               productionAmount: productionAmount\n                             }\n                            )\n    };\n    fetch(apiURL+'/productions', generationOptions)\n        .then(response => response.json());\n\n    const consumptionAmount = getRandomFloat(minConsumption,maxConsumption);\n\n    const consumptionOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ MPAN: meterpoint,\n                               consumptionAmount: consumptionAmount\n                             }\n                            )\n    };\n    fetch(apiURL+'/consumptions', consumptionOptions)\n        .then(response => response.json());\n};","import React, {useState, useEffect} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Menu, MenuItem, Box } from '@material-ui/core';\nimport { MemoryRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport FormControl from '@material-ui/core/FormControl';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport Consumption from './Consumption';\nimport Generation from './Generation';\nimport Blockchain from './Blockchain';\nimport { apiURL } from './api.js';\nimport './App.css';\n\nimport Meter from './Meter';\nimport CreateData from './CreateData';\n\nconst timeInterval = 10000;\n\nexport default function App(props) {\n  const[anchorEl, setAnchorEl] = useState(null);\n  const[meterpoint, setMeterpoint] = useState(\"\");\n  const[listItems, setListItems] = useState([]);\n\n  useEffect(() => \n  {\n    async function fetchData() {\n      const res = await fetch(apiURL+\"/meters/\");\n      res\n        .json()\n        .then(res => {\n            setListItems(res.map((result) => \n               <option key={result.Record.MPAN} value={result.Record.MPAN}>{result.Record.MPAN}</option>\n              )\n            );\n          }\n        )\n    };\n\n    fetchData();\n\n    const interval = setInterval(() => {\n      /* Need to add check for meterpoint here */\n      CreateData(meterpoint);\n    }, timeInterval);\n    return () => clearInterval(interval);\n  }, [meterpoint]);\n\n  const handleMenu = event => {\n    setAnchorEl( event.currentTarget );\n  };\n\n  const handleClose = () => {\n    setAnchorEl( null );\n  };\n\n  const handleChange = (event) => {\n    console.log(\"Setting meter = \" + event.target.value );\n    setMeterpoint( event.target.value );\n  };\n\n  return (\n      <React.Fragment>\n        <Router>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\n                <MenuIcon onClick={handleMenu}/>\n              </IconButton>\n              <Menu\n                id=\"main-menu\"\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n              >\n                <MenuItem onClick={handleClose} component={Link} to='/'>Home</MenuItem>\n                <MenuItem onClick={handleClose} component={Link} to='/consumption'>Consumption</MenuItem>\n                <MenuItem onClick={handleClose} component={Link} to='/generation'>Generation</MenuItem>\n                <MenuItem onClick={handleClose} component={Link} to='/blockchain'>Blockchain</MenuItem>\n              </Menu>\n              <Typography variant=\"h6\" >\n                Sitigrid Demo\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <Switch>\n            <Route path=\"/consumption\">\n              <Meter meterpoint={meterpoint}/>\n              <Box m={4}>\n                <Typography>\n                  Consumption records:\n                </Typography>\n                <Consumption meterpoint={meterpoint}/>\n              </Box>\n            </Route>\n            <Route path=\"/generation\">\n              <Meter meterpoint={meterpoint}/>\n              <Box m={4}>\n                <Typography>\n                  Generation records:\n                </Typography>\n                <Generation meterpoint={meterpoint}/>\n              </Box>\n            </Route>\n            <Route path=\"/blockchain\">\n              <Box m={4}>\n                <Typography>\n                  Blockchain:\n                </Typography>\n                <Blockchain/>\n              </Box>\n            </Route>\n            <Route path=\"/\">\n              <Box m={4}>\n                <Typography>\n                  Welcome to Sitigrid!\n                </Typography>\n                <Typography>\n                  Energy sharing for a carbon neutral network\n                </Typography>                \n              </Box>\n              <Box m={4}>\n                <Typography>\n                Please select a meter : \n                </Typography>\n                <FormControl>\n                  <NativeSelect\n                    value={meterpoint}\n                    onChange={handleChange}\n                  >\n                    <option disabled aria-label=\"None\" value=\"\" />\n                    {listItems}\n                  </NativeSelect>\n                </FormControl>\n              </Box>\n            </Route>\n          </Switch>\n        </Router>\n      </React.Fragment>\n  );\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}